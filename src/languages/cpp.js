const monaco = require("monaco-editor");

export const language = {
  id: "cpp",
  extensions: [".cpp", ".c", ".hpp", ".h"],
  aliases: ["c++", "C++", "Cpp", "c", "C"],
  mimetypes: ["application/json"],
};

// whether enable token completion
export const enableTokenCompletion = true;

export const snippets = [
  {
    label: "main",
    documentation: "int main(int argc, char *argv[])",
    insertText: "int main(int argc, char *argv[]) {\n\t${1}\n}",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "cin",
    documentation: "cin",
    insertText: "std::cin >> ${1:value};",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "cout",
    documentation: "cout with endl",
    insertText: "std::cout << ${1:value} << std::endl;",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "forloop",
    documentation: "for loop with index++",
    insertText: "for (auto ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i}) {\n\t${3}\n}",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "foreach",
    documentation: "for-each-in loop",
    insertText: "for (auto &${1:element}: ${2:container}) {\n\t${3}\n}",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "forit",
    documentation: "for loop with iterator++",
    insertText:
      "for (auto it = ${1:container}.begin(); it != ${1:container}.end(); ++it) {\n\t${2}\n}",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "header_wrapper",
    documentation: "wrapper to include this file only once",
    insertText: "#ifndef ${1}\n#define ${1}\n\n${2}\n\n#endif /* ${1} */",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "#include_stdcpp",
    documentation: "include all header for std c++",
    insertText: "#include <bits/stdc++.h>\n",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
];

export const keywords = [
  "and",
  "and_eq",
  "asm",
  "auto",
  "bitand",
  "bitor",
  "bool",
  "break",
  "case",
  "catch",
  "char",
  "class",
  "compl",
  "const",
  "constexpr",
  "const_cast",
  "continue",
  "decltype",
  "default",
  "delete",
  "do",
  "double",
  "dynamic_cast",
  "else",
  "enum",
  "explicit",
  "export",
  "extern",
  "false",
  "float",
  "for",
  "friend",
  "goto",
  "if",
  "inline",
  "int",
  "long",
  "mutable",
  "namespace",
  "new",
  "noexcept",
  "not",
  "not_eq",
  "nullptr",
  "operator",
  "or",
  "or_eq",
  "private",
  "protected",
  "public",
  "register",
  "reinterpret_cast",
  "return",
  "short",
  "signed",
  "sizeof",
  "static",
  "static_assert",
  "static_cast",
  "struct",
  "switch",
  "template",
  "this",
  "thread_local",
  "throw",
  "true",
  "try",
  "typedef",
  "typeid",
  "typename",
  "union",
  "unsigned",
  "using",
  "virtual",
  "void",
  "volatile",
  "wchar_t",
  "while",
  "xor",
  "xor_eq",
  "override",
  "final",
  "std",
  "define",
  "include",
];
