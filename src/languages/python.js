const monaco = require("monaco-editor");

export const language = {
  id: "python",
  extensions: [".python", ".py", ".pyd"],
  aliases: ["Python", "python"],
  mimetypes: ["application/json"],
};

export const enableTokenCompletion = true;

export const snippets = [
  {
    label: "main",
    documentation: "if __main__",
    insertText: 'if __name__ == "__main__":\n\t',
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "printf",
    documentation: "print with format",
    insertText: 'print("{${1}}".format(${2}))',
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "forrange",
    documentation: "for in range",
    insertText: "for ${1:i} in range(${2:n}):\n\t",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "forenum",
    documentation: "for in enumerate",
    insertText: "for ${1:index}, ${2:value} in enumerate(${3:seq}):\n\t",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "utf8",
    documentation: "encoding=utf-8",
    insertText: "# -*- coding: utf-8 -*-\n",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "defmethod",
    documentation: "define a method in class",
    insertText: "def ${1:method}(self, ${2:*args}):\n\t",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "list2d_basic",
    documentation: "2D-list with built-in basic type elements",
    insertText: "[[${1:0}]*${3:cols} for _ in range(${2:rows})]",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
  {
    label: "list2d_gen",
    documentation: "2D-list when List multiplication is not safe",
    insertText:
      "[[${1:0} for __ in range(${3:cols})] for _ in range(${2:rows})]",
    insertTextRules:
      monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
    rangeRule: "replaceCurrentWord",
  },
];

export const keywords = [
  "and",
  "as",
  "assert",
  "break",
  "class",
  "continue",
  "def",
  "del",
  "elif",
  "else",
  "except",
  "False",
  "finally",
  "for",
  "from",
  "global",
  "if",
  "import",
  "in",
  "is",
  "lambda",
  "None",
  "nonlocal",
  "not",
  "or",
  "pass",
  "raise",
  "return",
  "True",
  "try",
  "while",
  "with",
  "yield",

  "int",
  "float",
  "long",
  "complex",
  "hex",

  "abs",
  "all",
  "any",
  "apply",
  "basestring",
  "bin",
  "bool",
  "buffer",
  "bytearray",
  "callable",
  "chr",
  "classmethod",
  "cmp",
  "coerce",
  "compile",
  "complex",
  "delattr",
  "dict",
  "dir",
  "divmod",
  "enumerate",
  "eval",
  "execfile",
  "file",
  "filter",
  "format",
  "frozenset",
  "getattr",
  "globals",
  "hasattr",
  "hash",
  "help",
  "id",
  "input",
  "intern",
  "isinstance",
  "issubclass",
  "iter",
  "len",
  "locals",
  "list",
  "map",
  "max",
  "memoryview",
  "min",
  "next",
  "object",
  "oct",
  "open",
  "ord",
  "pow",
  "print",
  "property",
  "reversed",
  "range",
  "raw_input",
  "reduce",
  "reload",
  "repr",
  "reversed",
  "round",
  "set",
  "setattr",
  "slice",
  "sorted",
  "staticmethod",
  "str",
  "sum",
  "super",
  "tuple",
  "type",
  "unichr",
  "unicode",
  "vars",
  "xrange",
  "zip",
  "__dict__",
  "__methods__",
  "__members__",
  "__class__",
  "__bases__",
  "__name__",
  "__mro__",
  "__subclasses__",
  "__init__",
  "__import__",
];
